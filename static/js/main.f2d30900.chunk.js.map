{"version":3,"sources":["Dashboard/Dashboard.module.css","Balance/Balance.module.css","Controls/Controls.module.css","TransactionHistory/TransactionHistory.module.css","Controls/Controls.jsx","Balance/Balance.jsx","TransactionHistory/TransactionHistory.jsx","Dashboard/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Controls","state","value","reset","setState","handleChange","bind","event","this","target","className","styles","controls","type","min","name","input","onChange","button","onClick","props","onDeposit","onWithdraw","Component","Balance","balance","income","expenses","TransactionHistory","history","thead","tbody","items","map","item","key","id","amount","date","Dashboard","transactions","notifyA","toast","notifyB","notifyD","saveTransaction","shortid","generate","Date","toLocaleString","Number","countIncome","countExpenses","totalDepositSum","filter","transaction","reduce","acc","totalWithdrawalSum","dashboard","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wIACAA,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,2B,sDCA5BD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,wBAAwB,OAAS,2B,kBCAjGD,EAAOC,QAAU,CAAC,QAAU,oCAAoC,MAAQ,kCAAkC,MAAQ,oC,mLC8BnGC,E,2MArBXC,MAAQ,CAAEC,MAAO,I,EAMjBC,MAAQ,WACJ,EAAKC,SAAS,CAAEF,MAAO,M,EAG3BG,aAAe,EAAKA,aAAaC,KAAlB,gB,4EARFC,GACTC,KAAKJ,SAAS,CAAEF,MAAOK,EAAME,OAAOP,U,+BAS9B,IAAD,OACL,OAAO,6BAASQ,UAAWC,IAAOC,UAC9B,2BAAOC,KAAK,SAASC,IAAI,IAAIC,KAAK,SAASL,UAAWC,IAAOK,MAAOd,MAAOM,KAAKP,MAAMC,MAAOe,SAAUT,KAAKH,eAC5G,4BAAQQ,KAAK,SAASH,UAAWC,IAAOO,OAAQC,QAAS,kBAAM,EAAKC,MAAMC,UAAU,EAAKpB,MAAMC,MAAO,EAAKC,SAA3G,WACA,4BAAQU,KAAK,SAASH,UAAWC,IAAOO,OAAQC,QAAS,kBAAM,EAAKC,MAAME,WAAW,EAAKrB,MAAMC,MAAO,EAAKC,SAA5G,iB,GAtBWoB,a,iBCaRC,EAbC,SAACJ,GAAD,OACZ,6BAASV,UAAWC,IAAOc,SACvB,6CAAUL,EAAMM,OAAhB,KACA,6CAAUN,EAAMO,SAAhB,KACA,0CAAgBP,EAAMK,QAAtB,O,gBCuBOG,EA1BY,SAACR,GAAD,OACvB,2BAAOV,UAAWC,IAAOkB,SACrB,2BAAOnB,UAAWC,IAAOmB,OACrB,4BACI,2CACA,sCACA,sCAGR,2BAAOpB,UAAWC,IAAOoB,OACpBX,EAAMY,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKE,GAAI1B,UAAWC,IAAOoB,OAChC,4BAAMG,EAAKrB,MACX,4BAAMqB,EAAKG,OAAX,KACA,4BAAMH,EAAKI,a,OC4EhBC,G,iNArFXtC,MAAQ,CACJoC,OAAQ,EACRG,aAAc,GACdf,QAAS,EACTC,OAAQ,EACRC,SAAU,G,EAGdc,QAAU,kBAAMC,YAAM,gN,EACtBC,QAAU,kBAAMD,YAAM,sS,EACtBE,QAAU,kBAAMF,YAAM,6N,EAEtBG,gBAAkB,SAACR,EAAQxB,GAOvB,MANuB,CACnBuB,GAAIU,IAAQC,WACZT,MAAM,IAAIU,MAAOC,iBACjBZ,OAAQA,EACRxB,KAAMA,I,EAKdQ,UAAY,SAACgB,EAAQlC,GACF,KAAXkC,EAGEA,GAAU,EACZ,EAAKO,UAEHP,EAAS,IACX,EAAKjC,UAAS,gBAAGoC,EAAH,EAAGA,aAAcf,EAAjB,EAAiBA,QAAjB,MAAgC,CAC1Ce,aAAa,GAAD,mBAAMA,GAAN,CAAoB,EAAKK,gBAAgBR,EAAQ,aAC7DZ,QAASyB,OAAOzB,GAAWyB,OAAOb,OAEtC,EAAKc,YAAY,EAAKlD,MAAMuC,aAAcH,GAC1ClC,KAXA,EAAKsC,W,EAebnB,WAAa,SAACe,EAAQlC,GACH,KAAXkC,EAGE,EAAKpC,MAAMwB,QAAUY,EACvB,EAAKM,UAEHN,EAAS,EACX,EAAKO,UAEH,EAAK3C,MAAMwB,SAAWY,IACxB,EAAKjC,UAAS,gBAAGoC,EAAH,EAAGA,aAAcf,EAAjB,EAAiBA,QAAjB,MAAgC,CAC1Ce,aAAa,GAAD,mBAAMA,GAAN,CAAoB,EAAKK,gBAAgBR,EAAQ,gBAC7DZ,QAASyB,OAAOzB,GAAWyB,OAAOb,OAEtC,EAAKe,cAAc,EAAKnD,MAAMuC,aAAcH,GAC5ClC,KAdA,EAAKsC,W,EAkBbU,YAAc,SAACX,EAAcH,GACzB,IAAMgB,EAAkB,YAAIb,EAAac,QAAO,SAAAC,GAAW,MAAyB,YAArBA,EAAY1C,SACzE2C,QAAO,SAACC,EAAKF,GACX,OAAQL,OAAOO,GAAOP,OAAOK,EAAYlB,UAC1Ca,OAAOb,IACV,EAAKjC,SAAS,CAAEsB,OAAQ2B,K,EAG5BD,cAAgB,SAACZ,EAAcH,GAC3B,IAAMqB,EAAqB,YAAIlB,EAAac,QAAO,SAAAC,GAAW,MAAyB,eAArBA,EAAY1C,SACzE2C,QAAO,SAACC,EAAKF,GACV,OAAQL,OAAOO,GAAOP,OAAOK,EAAYlB,UAC1Ca,OAAOb,IACd,EAAKjC,SAAS,CAAEuB,SAAU+B,K,wEAI1B,OAAO,yBAAKhD,UAAWC,IAAOgD,WAC1B,kBAAC,EAAD,CAAUtC,UAAWb,KAAKa,UAAWC,WAAYd,KAAKc,aACtD,kBAAC,EAAD,CAASG,QAASjB,KAAKP,MAAMwB,QAASC,OAAQlB,KAAKP,MAAMyB,OAAQC,SAAUnB,KAAKP,MAAM0B,WACtF,kBAAC,EAAD,CAAoBK,MAAOxB,KAAKP,MAAMuC,eACtC,kBAAC,IAAD,W,GAjFYjB,cCJTqC,EAFH,kBAAM,kBAAC,EAAD,OCSZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3E,QACfqE,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,iCAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,iCAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC3C/BE,K","file":"static/js/main.f2d30900.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__3RCjr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__ad2bo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2PVf0\",\"input\":\"Controls_input__1lGLk\",\"button\":\"Controls_button__2yI3E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__9BoVj\",\"thead\":\"TransactionHistory_thead__3_eib\",\"tbody\":\"TransactionHistory_tbody__TBjhV\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nclass Controls extends Component {\n    static propTypes = {\n        onDeposit: PropTypes.func.isRequired,\n        onWithdraw: PropTypes.func.isRequired\n    }\n\n    state = { value: \"\" }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    reset = () => {\n        this.setState({ value: '' });\n    }\n\n    handleChange = this.handleChange.bind(this);\n\n    render() {\n        return <section className={styles.controls} >\n            <input type=\"number\" min=\"0\" name=\"amount\" className={styles.input} value={this.state.value} onChange={this.handleChange} />\n            <button type=\"button\" className={styles.button} onClick={() => this.props.onDeposit(this.state.value, this.reset)}>Deposit</button>\n            <button type=\"button\" className={styles.button} onClick={() => this.props.onWithdraw(this.state.value, this.reset)}>Withdraw</button>\n        </section>\n    }\n};\n\nexport default Controls;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = (props) => (\n    <section className={styles.balance}>\n        <span >⬆️{props.income}$</span>\n        <span >⬇️{props.expenses}$</span>\n        <span>Balance: {props.balance}$</span>\n    </section>\n);\n\nBalance.propTypes = {\n    balance: PropTypes.number.isRequired,\n    income: PropTypes.number.isRequired,\n    expenses: PropTypes.number.isRequired,\n};\nexport default Balance;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\n\nconst TransactionHistory = (props) => (\n    <table className={styles.history}>\n        <thead className={styles.thead}>\n            <tr>\n                <th>Transaction</th>\n                <th>Amount</th>\n                <th>Date</th>\n            </tr>\n        </thead>\n        <tbody className={styles.tbody}>\n            {props.items.map(item => (\n                <tr key={item.id} className={styles.tbody}>\n                    <td >{item.type}</td>\n                    <td >{item.amount}$</td>\n                    <td >{item.date}</td>\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nTransactionHistory.propTypes = {\n    items: PropTypes.array.isRequired,\n};\n\n\nexport default TransactionHistory;","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport styles from './Dashboard.module.css';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Dashboard extends Component {\n    state = {\n        amount: 0,\n        transactions: [],\n        balance: 0,\n        income: 0,\n        expenses: 0,\n    };\n\n    notifyA = () => toast('Введите сумму для проведения операции!');\n    notifyB = () => toast('На счету недостаточно средств для проведения операции!');\n    notifyD = () => toast('Сумма транзакции должна быть больше нуля!');\n\n    saveTransaction = (amount, type) => {\n        const newTransaction = {\n            id: shortid.generate(),\n            date: new Date().toLocaleString(),\n            amount: amount,\n            type: type,\n        };\n        return newTransaction;\n    };\n\n    onDeposit = (amount, reset) => {\n        if (amount === \"\") {\n            this.notifyA();\n            return;\n        } if (amount <= 0) {\n            this.notifyD();\n            return;\n        } if (amount > 0) {\n            this.setState(({ transactions, balance }) => ({\n                transactions: [...transactions, this.saveTransaction(amount, \"Deposit\")],\n                balance: Number(balance) + Number(amount),\n            }));\n            this.countIncome(this.state.transactions, amount);\n            reset();\n        }\n    };\n\n    onWithdraw = (amount, reset) => {\n        if (amount === \"\") {\n            this.notifyA();\n            return;\n        } if (this.state.balance < amount) {\n            this.notifyB();\n            return;\n        } if (amount < 0) {\n            this.notifyD();\n            return;\n        } if (this.state.balance >= amount) {\n            this.setState(({ transactions, balance }) => ({\n                transactions: [...transactions, this.saveTransaction(amount, \"Withdrawal\")],\n                balance: Number(balance) - Number(amount),\n            }));\n            this.countExpenses(this.state.transactions, amount);\n            reset();\n        }\n    };\n\n    countIncome = (transactions, amount) => {\n        const totalDepositSum = [...transactions.filter(transaction => transaction.type === \"Deposit\")\n        ].reduce((acc, transaction) => {\n            return (Number(acc) + Number(transaction.amount));\n        }, Number(amount));\n        this.setState({ income: totalDepositSum });\n    };\n\n    countExpenses = (transactions, amount) => {\n        const totalWithdrawalSum = [...transactions.filter(transaction => transaction.type === \"Withdrawal\")]\n            .reduce((acc, transaction) => {\n                return (Number(acc) + Number(transaction.amount));\n            }, Number(amount));\n        this.setState({ expenses: totalWithdrawalSum });\n    };\n\n    render() {\n        return <div className={styles.dashboard}>\n            <Controls onDeposit={this.onDeposit} onWithdraw={this.onWithdraw} />\n            <Balance balance={this.state.balance} income={this.state.income} expenses={this.state.expenses} />\n            <TransactionHistory items={this.state.transactions} />\n            <ToastContainer />\n        </div>\n    };\n};\n\nexport default Dashboard;","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\n\nconst App = () => <Dashboard />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}